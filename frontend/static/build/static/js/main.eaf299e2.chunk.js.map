{"version":3,"sources":["images/leaf.png","images/farmer.png","components/Header/Header.js","components/Auth/Registration.js","components/Auth/Login.js","components/Auth/Splash.js","components/Main/Profile/GardenItem.js","components/Main/Profile/CreateAGarden.js","components/Main/Profile/GardenList.js","components/Main/Profile/GardenNotes.js","components/Main/Profile/GardenDetail.js","components/Main/Soil/Soil.js","components/Main/Vegetables/FilteredVegetableList.js","components/Main/Vegetables/UserVegetableList.js","components/Main/Vegetables/Vegetables.js","components/Main/Layout/Companions.js","components/Main/Layout/Layout.js","components/Main/Summary/Summary.js","components/NavBar/NavBar.js","components/Footer/Footer.js","components/Main/Varieties/VarietiesDetail.js","components/Main/Varieties/Varieties.js","App.js","index.js"],"names":["withRouter","props","useState","username","setUsername","open","setOpen","a","console","log","options","method","headers","Cookie","get","fetch","response","ok","json","data","set","key","charAt","toUpperCase","slice","toLowerCase","remove","history","push","setIsAuth","useEffect","grabUserName","showHeader","className","onClick","src","Leaf","alt","isAuth","Farmer","Collapse","in","Registration","email","password1","password2","setData","handleChange","e","target","name","value","updatedData","preventDefault","body","JSON","stringify","setShowHeader","to","onSubmit","htmlFor","type","id","placeholder","onChange","password","action","Splash","removeGardenFromList","created_at","Modal","Header","closeButton","Title","Body","Footer","Button","variant","handleClose","userGardenList","setUserGardenList","show","setShow","index","findIndex","garden","updatedGardenList","splice","grabUserGardenList","setShowNav","onHide","length","map","element","notes","setNotes","isEditing","setIsEditing","userGardenID","handleBlur","handleDeleteClick","idx","updatedNotes","handleClick","fetchNotes","note","arr","onBlur","match","params","layout","userGarden","setUserGarden","rename","setRename","scrollView","setScrollView","fullscreen","setFullscreen","handleEditVegetablesClick","grabUserGarden","soil_details","characteristics","recommendations","v","split","setTimeout","window","print","vegetables_details","vegetable","exposure","heat_tolerant","drought_tolerant","seasonality","life_cycle","varieties","undefined","varietiesPerVegetable","prop","variety","companions","adversaries","Spinner","animation","firstRender","useRef","setLoaded","soil_order","soil","setSoil","showMap","setShowMap","maxWidth","setMaxWidth","showDetails","setShowDetails","soilDiv","current","getSoilDetails","scrollIntoView","behavior","block","inline","url","modulesToLoad","onReady","loadedModules","esriConfig","Map","MapView","FeatureLayer","Locate","Point","containerNode","apiKey","basemap","view","container","center","zoom","soilsLayer","outFields","opacity","add","soilOrder1","soilOrder2","locate","useHeadingEnabled","goToOverride","scale","goTo","on","event","latitude","mapPoint","longitude","screenPoint","toScreen","hitTest","then","hitTestResult","results","graphic","attributes","esrisymbology","ui","ref","FilteredVegetableList","filteredVegetables","userVegetables","some","uuidv4","addToUserList","UserVegetableList","removeFromUserList","queryString","pkValues","filterData","setFilterData","setFilteredVegetables","setUserVegetables","showForm","setShowForm","widthMax","setWidthMax","filteredVegScroll","filterFormScroll","checked","updatedFilterData","grabPKvalues","vegetables","i","getUsersVegetableList","Fade","getVegetableDetails","userVeggieToAdd","updatedUserVegetables","getGardenDetails","canvasRef","contextRef","isDrawing","setIsDrawing","postCanvasLayout","formData","Promise","resolve","toBlob","imageBlob","FormData","append","canvas","width","height","style","context","getContext","lineCap","strokeStyle","lineWidth","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","paramValue","radioValue","setRadioValue","location","pathname","ButtonGroup","radio","ToggleButton","currentTarget","setVariety","previousVarietyList","setPreviousVarietyList","showInput","setShowInput","updatedVariety","updateVarieties","prevState","setShowSuccessAlert","property","prevValue","findPreviousSavedVarieties","prevVariety","deleteVariety","updatedState","setShowDeleteAlert","handleDelete","onKeyPress","handleKeyPress","showSuccessAlert","showDeleteAlert","Object","keys","class","role","navBar","showNav","cookie","checkAuth","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaf299e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/leaf.1c74297e.png\";","export default __webpack_public_path__ + \"static/media/farmer.56533210.png\";","import React from \"react\";\nimport \"./Header.css\";\nimport Leaf from \"../../images/leaf.png\";\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport Cookie from \"js-cookie\";\nimport { useEffect, useState } from \"react\";\nimport Farmer from \"../../images/farmer.png\";\nimport { Button, Collapse, Spinner } from \"react-bootstrap\";\n\nfunction Header(props) {\n    const [username, setUsername] = useState();\n    const [open, setOpen] = useState(false);\n\n\n    useEffect(() => {\n        grabUserName();\n    }, [username, props]);\n\n\n\n    async function grabUserName() {\n        console.log(\"1111fired\")\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\"/rest-auth/user/\", options);\n        if (response.ok === false) {\n            console.log(\"LOGIN FAILED\", response);\n        } else {\n            const data = await response.json();\n            Cookie.set(\"Authorization\", `Token ${data.key}`);\n\n            let username = data.username.charAt(0).toUpperCase() + data.username.slice(1).toLowerCase();\n            setUsername(username);\n        }\n    }\n\n    function handleProfileClick() {\n        props.history.push(\"/gardenlist/\");\n        setOpen(false);\n    }\n\n    async function handleLogoutClick() {\n        const options = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\"/rest-auth/logout/\", options);\n        if (response.ok === false) {\n            console.log(\"LOGOUT FAILED\", response);\n        } else {\n            const data = await response.json();\n            Cookie.remove(\"Authorization\");\n            console.log(\"LOGOUT SUCCESSFUL\", data);\n            props.history.push(\"/\");\n            props.setIsAuth(false);\n            setOpen(false);\n            setUsername(\"\");\n        }\n    }\n\n    function handleBannerClick() {\n        props.history.push('/gardenlist');\n    }\n\n    if (!props.showHeader) {\n        return \"\";\n    }\n\n\n    return (\n        <div className=\"header-container\">\n            <div className=\"logo-container\" onClick={handleBannerClick}>\n                <h1 className=\"header-title\">Flourish</h1>\n                <img src={Leaf} alt=\"green leaf\" className=\"header-leaf\" />\n            </div>\n            {(props.isAuth && username) ?\n                <>\n                    <div\n                        onClick={() => setOpen(!open)}\n                        aria-controls=\"example-collapse-text\"\n                        aria-expanded={open}\n                    >\n                        <div className=\"header-user-container\">\n                            <p className=\"header-username\">{username}</p>\n                            <div className=\"header-user-icon-container\">\n                                {\" \"}\n                                <img\n                                    src={Farmer}\n                                    alt=\"\"\n                                    className=\"header-user-icon\"\n                                />{\" \"}\n                            </div>\n                        </div>\n                    </div>\n                    <Collapse in={open}>\n                        <div className=\"header-user-collapse\">\n                            <button\n                                className=\"header-user-profile-btn\"\n                                onClick={handleProfileClick}\n                            >\n                                Profile\n                            </button>\n                            <button\n                                className=\"header-user-logout-btn\"\n                                onClick={handleLogoutClick}\n                            >\n                                Logout\n                            </button>\n                        </div>\n                    </Collapse>\n                </>\n            :\n                \" \"\n            }\n        </div>\n    );\n}\n\nexport default withRouter(Header);\n","import React from 'react';\nimport Cookie from 'js-cookie';\nimport { useState, useEffect } from 'react';\nimport './Registration.css';\nimport { Redirect } from 'react-router-dom';\n\nexport default function Registration(props) {\n\n    const [data, setData] = useState({\n        username: \"\",\n        email: \"\",\n        password1: \"\",\n        password2: \"\",\n    })\n\n    useEffect( ()=> {\n        props.setShowHeader(true);\n    }, [])\n\n    function handleChange(e) {\n        let {name, value} = e.target\n        let updatedData = {...data, [name]: value}\n        setData(updatedData)\n    }\n\n   async function handleSubmit(e) {\n       e.preventDefault()\n\n        const options = {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken' : Cookie.get('csrftoken')\n            },\n            body: JSON.stringify(data)\n        }\n        const response = await fetch('/rest-auth/registration/', options)\n        if (response.ok === false) {\n        } else {\n            const data = await response.json();\n            Cookie.set(\"Authorization\", `Token ${data.key}`);\n            props.setIsAuth(true);\n\n        }\n    }\n\n    if (props.isAuth === true) {\n        return <Redirect to=\"/gardenlist\" />\n     }\n     \n    return (\n        <div className=\"registration-container\">\n            <form className=\"form-control\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n            <label htmlFor=\"username\" className=\"form-label mt-3 registration-label\">Username:</label>\n                <input type=\"text\" className=\"form-control\" name=\"username\" id=\"username\" placeholder=\"Enter Username..\" value={data.username} onChange={handleChange} />\n            </div>\n            <div className=\"form-group\">\n            <label htmlFor=\"email\" className=\"form-label mt-3 registration-label\">Email:</label>\n                <input type=\"email\" className=\"form-control\" name=\"email\" id=\"email\" placeholder=\"Enter Email..\" value={data.email} onChange={handleChange} />\n            </div>\n            <div className=\"form-group\">\n            <label htmlFor=\"password1\" className=\"form-label mt-3 registration-label\">Password:</label>\n                <input type=\"password\" className=\"form-control\" name=\"password1\" id=\"password1\" placeholder=\"Enter Password..\" value={data.password1} onChange={handleChange} />\n            </div>\n            <div className=\"form-group\">\n            <label htmlFor=\"password2\" className=\"form-label mt-3 registration-label\">Confirm Password:</label>\n                <input type=\"password\" className=\"form-control\" name=\"password2\" id=\"password2\" placeholder=\"Confirm Password..\" value={data.password2} onChange={handleChange} />\n            </div>\n            <button className=\"btn btn-success mt-3\">Register</button>\n            </form>\n        </div>\n    )\n}\n","import React from 'react';\nimport Cookie from 'js-cookie';\nimport { useState, useEffect } from 'react';\nimport './Login.css';\nimport { Redirect, withRouter } from 'react-router-dom';\n\nfunction Login(props) {\n\n    const [data, setData] = useState({\n        username: \"\",\n        password: \"\",\n    })\n\n    useEffect( ()=> {\n        props.setShowHeader(true);\n    }, [])\n\n    function handleChange(e) {\n        let {name, value} = e.target;\n        let updatedData = {...data, [name]: value };\n        setData(updatedData);\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-CSRFToken': Cookie.get(\"csrftoken\")\n            },\n            body: JSON.stringify(data)\n        }\n        const response = await fetch('/rest-auth/login/', options)\n        if (response.ok === false) {\n            console.log(\"LOGIN FAILED\", response);\n        } else {\n            const data = await response.json();\n            Cookie.set('Authorization', `Token ${data.key}`)\n            props.setIsAuth(true);\n\n        }\n    }\n\n    if (props.isAuth === true) {\n       return <Redirect to=\"/gardenlist\" />\n    }\n\n    return (\n        <div className=\"login-container\">\n            <form action=\"\" className=\"form-control\" onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"username\" className=\"form-label login-label\">Username:</label>\n                    <input className=\"form-control\" type=\"text\" id=\"username\" name=\"username\" value={data.username} placeholder=\"Enter Username..\" onChange={handleChange} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\" className=\"form-label login-label\">Password:</label>\n                    <input className=\"form-control\" type=\"password\" id=\"password\" name=\"password\" value={data.password} placeholder=\"Enter Password..\" onChange={handleChange} />\n                </div>\n                <button className=\"btn btn-success mt-3\">Login</button>\n            </form>\n            \n        </div>\n    )\n}\n\nexport default withRouter(Login)","import React from \"react\";\nimport \"./Splash.css\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport { useEffect } from 'react';\n\nexport default function Splash(props) {\n\n    useEffect( ()=> {\n        props.setShowHeader(false);\n    }, [])\n\n    if (props.isAuth) {\n       return <Redirect to=\"/gardenlist\" />\n    }\n\n    return (\n        <div className=\"splash-container\">\n            <h1 className=\"splash-main-heading\">\n                Welcome to <span className=\"flourish-span\">Flourish</span>\n            </h1>\n            <h2 className=\"splash-sub-heading\">\n                Plan, organize and improve your garden.\n            </h2>\n            <p className=\"splash-description\">\n                Bountiful, high-yielding gardens are products of thorough\n                preparation. Flourish is a tool to help you prepare your garden\n                for the upcoming season, while allowing you to cut down the time\n                it takes to lay the groundwork. The Flourish experience takes\n                you through a series of steps with each step focusing on\n                important gardening areas: <span className=\"splash-soil\">Soil</span>, <span className=\"splash-vegetables\">Vegetables</span>, <span className=\"splash-companion\">Companion Planting</span>,\n                and  <span className=\"splash-layout\">Physical Layout</span>.\n            </p>\n            {/* <ol className=\"splash-list\">\n                <li className=\"splash-list-step\">\n                    {\" \"}\n                    <span className=\"splash-soil splash-lobster-font\">1) Soil:</span> Find your soil type based on your desired location.\n                    Using your specific soil type, we give your soil\n                    characteristics and recommendtations for potential\n                    improvements.\n                </li>\n                <li className=\"splash-list-step\">\n                    {\" \"}\n                    <span className=\"splash-vegetables splash-lobster-font\">2) Vegetables:</span> Considering the varying conditions of your garden, we allow you to filter against plant characteristics so you can choose the most appropriate vegetables specific areas of your garden.\n                </li>\n                <li className=\"splash-list-step\">\n                    {\" \"}\n                    <span className=\"splash-companion splash-lobster-font\">3) Companion Planting:</span> Vegetables often do better if they are planted alongside other plants; however, there can also be plants you do not want to plant together. We help find the best companion plants for your chosen vegetables. \n                </li>\n                <li className=\"splash-list-step\">\n                    {\" \"}\n                    <span className=\"splash-layout splash-lobster-font\"> 4) Physical Layout:</span> Drafting the visual layout of your garden can be highly beneficial for garden preparation. We allow you to sketch an outline of your garden beds, while providing an area for you to jot down important notes.\n                </li>\n\n            </ol> */}\n            <div className=\"splash-btn-group\">\n            <NavLink to=\"/login\">\n                <button\n                    className=\"btn btn-success mt-2 flagship-btn\"\n                    value=\"login\"\n                >\n                    Login\n                </button>\n            </NavLink>\n            <NavLink to=\"/registration\">\n                <button\n                    className=\"btn btn-success mt-2 flagship-btn\"\n                    value=\"register\"\n                >\n                    Register\n                </button>\n                </NavLink>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router\";\nimport \"./GardenItem.css\";\nimport { AiOutlineClose } from \"react-icons/ai\";\n\nfunction GardenItem(props) {\n    function handleGardenItemClick(e) {\n        props.history.push(`/gardenlist/${props.id}`);\n    }\n\n    function handleClick() {\n        props.removeGardenFromList(props.id);\n    }\n\n    return (\n        <div className=\"garden-item-container\">\n            <div className=\"garden-item-btn-container\" onClick={handleClick}>\n                <AiOutlineClose />\n            </div>\n            <div className=\"garden-item-text-container\">\n                <h3>{props.name}</h3>\n                <p>Created: {props.created_at}</p>\n                <p\n                    onClick={handleGardenItemClick}\n                    className=\"garden-item-more-details\"\n                >\n                    Click for more details\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(GardenItem);\n","import Cookie from \"js-cookie\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nfunction CreateAGarden(props) {\n    const [data, setData] = useState({\n        name: \"\",\n    });\n\n    function handleChange(e) {\n        let { name, value } = e.target;\n        let updatedData = { ...data, [name]: value };\n        setData(updatedData);\n    }\n\n    async function handleCreateGarden(e) {\n        e.preventDefault();\n\n        const options = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: JSON.stringify(data),\n        };\n        const response = await fetch(\"/api/gardens/\", options);\n        if (response.ok === false) {\n            console.log(\"GARDEN NAME FAILED\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"GARDEN NAME SUCCESS\", data);\n\n            props.history.push(`/${data.id}/soil/`);\n        }\n    }\n\n    return (\n        <div className=\"get-started-container\">\n            <Modal.Header closeButton>\n                <Modal.Title>Enter a Garden Name:</Modal.Title>\n            </Modal.Header>\n                <Modal.Body>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        value={data[\"name\"]}\n                        onChange={handleChange}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={props.handleClose}>\n                        Close\n                    </Button>\n                    <Button\n                        variant=\"btn btn-success\"\n                        type=\"submit\"\n                        onClick={handleCreateGarden}\n                    >\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n        </div>\n    );\n}\n\nexport default withRouter(CreateAGarden);\n","import React from \"react\";\nimport GardenItem from \"./GardenItem\";\nimport CreateAGarden from './CreateAGarden';\nimport Cookie, { remove } from \"js-cookie\";\nimport { useEffect, useState } from \"react\";\nimport { Button, Modal } from 'react-bootstrap';\nimport \"./GardenList.css\";\nimport { withRouter } from \"react-router\";\n\nfunction GardenList(props) {\n    const [userGardenList, setUserGardenList] = useState([]);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    useEffect(() => {\n        grabUserGardenList();\n        props.setShowNav(false);\n        props.setShowHeader(true);\n    }, []);\n\n    async function grabUserGardenList() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\"/api/gardens/\", options);\n        if (response.ok === false) {\n            console.log(\"GARDEN LIST FAIL\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"GARDEN LIST SUCCESS\", data);\n            setUserGardenList(data);\n        }\n    }\n\n    async function removeGardenFromList(id) {\n        let index = userGardenList.findIndex((garden) => garden.id === id);\n        let updatedGardenList = [...userGardenList];\n        updatedGardenList.splice(index, 1);\n        setUserGardenList(updatedGardenList);\n\n        const options = {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(`/api/gardens/${id}/`, options);\n        if (response.ok === false) {\n            console.log(\"GARDEN LIST FAIL\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"GARDEN LIST SUCCESS\", data);\n        }\n    }\n    console.log(props.isAuth);\n\n    if (!props.isAuth) {\n        props.history.push(\"/\");\n    }\n\n\n\n    return (\n        <div className=\"garden-list-container\">\n            <Button variant=\"btn btn-success flagship-btn create-garden-btn\" onClick={handleShow}>\nCreate a Garden\n            </Button>\n            <Modal show={show} onHide={handleClose}>\n                <CreateAGarden handleClose={handleClose}/>\n            </Modal>\n            {userGardenList.length === 0 ? \"\" : <h2 className=\"garden-list-past-gardens\">Your Past Gardens:</h2>}\n            <div className=\"garden-list-grid-container\">\n                {userGardenList.map((element) => {\n                    return (\n                        <GardenItem\n                            {...element}\n                            removeGardenFromList={removeGardenFromList}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(GardenList);\n","import React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Cookie from \"js-cookie\";\nimport { withRouter } from \"react-router\";\nimport \"./GardenNotes.css\";\nimport { GrSend, GrFormEdit, GrFormClose } from \"react-icons/gr\";\nimport { IoIosAddCircle } from \"react-icons/io\";\nimport { FiEdit } from \"react-icons/fi\";\n\nfunction GardenNotes(props) {\n    const [notes, setNotes] = useState([\"yo\", \"dude\"]);\n    const [isEditing, setIsEditing] = useState(false);\n\n    useEffect(() => {\n        fetchNotes();\n    }, []);\n\n    async function fetchNotes() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/gardens/${props.userGardenID}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"VARIETY PATCH FAILED\", response);\n        } else {\n            const data = await response.json();\n            if (data.notes !== null) {\n                setNotes(data.notes);\n            }\n            console.log(\"VARIETY PATCH SUCCESS\", data);\n        }\n    }\n\n    function handleAddNote() {\n        let updatedNotes = [...notes];\n        updatedNotes.push(\" \");\n        setNotes(updatedNotes);\n    }\n\n    function handleChange(e, idx) {\n        let updatedNotes = [...notes];\n        updatedNotes[idx] = e.target.value;\n        setNotes(updatedNotes);\n        console.log(notes);\n    }\n\n    async function handleBlur() {\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: JSON.stringify({ notes: notes }),\n        };\n        const response = await fetch(\n            `/api/gardens/${props.userGardenID}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"NOTES PATCH FAILED\", response);\n        } else {\n            const data = await response.json();\n            setNotes(data.notes);\n            setIsEditing(false);\n            console.log(\"NOTES PATCH SUCCESS\", data);\n        }\n    }\n\n    async function handleDeleteClick(idx) {\n        let updatedNotes = [...notes];\n        updatedNotes.splice(idx, 1);\n\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: JSON.stringify({ notes: updatedNotes }),\n        };\n        const response = await fetch(\n            `/api/gardens/${props.userGardenID}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"NOTES DELETE FAILED\", response);\n        } else {\n            const data = await response.json();\n            setNotes(data.notes);\n            console.log(\"NOTES DELETE SUCCESS\", data);\n        }\n    }\n\n    function handleClick() {\n        setIsEditing(true);\n    }\n\n    function handleEditLayoutClick() {\n        props.history.push(`/${props.match.params.garden}/layout`);\n    }\n    \n\n    return (\n        <div className=\"garden-notes-outer-container\">\n            <div className=\"garden-notes-container\">\n                <h2 className=\"garden-notes-heading\">General Notes</h2>\n                <IoIosAddCircle\n                    className=\"garden-notes-add-note-btn\"\n                    onClick={handleAddNote}\n                />\n                <ul>\n                    {notes.map((note, idx, arr) => {\n                        return (\n                            <>\n                                {isEditing ? (\n                                    <li className=\"garden-notes-li\">\n                                        <textarea\n                                            className=\"garden-notes-textarea\"\n                                            type=\"text\"\n                                            value={notes[idx]}\n                                            onChange={(e) =>\n                                                handleChange(e, idx)\n                                            }\n                                            onBlur={handleBlur}\n                                        />\n                                        <div className=\"garden-notes-icon-container\">\n                                            <GrFormClose\n                                                value={idx}\n                                                className=\"garden-notes-delete-btn\"\n                                                onClick={(idx) =>\n                                                    handleDeleteClick(idx)\n                                                }\n                                            />\n                                        </div>\n                                    </li>\n                                ) : (\n                                    <li\n                                        className=\"garden-notes-li\"\n                                        onClick={handleClick}\n                                    >\n                                        <p className=\"garden-notes-input\">\n                                            {note}\n                                        </p>\n                                        <div className=\"garden-notes-icon-container\">\n                                            <GrFormClose\n                                                value={idx}\n                                                className=\"garden-notes-delete-btn\"\n                                                onClick={(idx) =>\n                                                    handleDeleteClick(idx)\n                                                }\n                                            />\n                                        </div>\n                                    </li>\n                                )}\n                            </>\n                        );\n                    })}\n                </ul>\n            </div>\n\n            <h4>\n                Layout <FiEdit className=\"garden-detail-edit-btn\" onClick={handleEditLayoutClick} />\n            </h4>\n            <div className=\"garden-detail-layout-container\">\n                {\" \"}\n                <img\n                    src={props.layout}\n                    className=\"garden-detail-layout-image\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(GardenNotes);\n","import React from \"react\";\nimport { withRouter } from \"react-router\";\nimport { useEffect, useState } from \"react\";\nimport Cookie from \"js-cookie\";\nimport \"./GardenDetail.css\";\nimport { Spinner, Button, Collapse, Modal } from \"react-bootstrap\";\nimport { FiEdit } from \"react-icons/fi\";\nimport RichTextEditor from \"./GardenNotes\";\n\nfunction GardenDetail(props) {\n    const [userGarden, setUserGarden] = useState();\n    const [open, setOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [rename, setRename] = useState(\"\");\n    const [scrollView, setScrollView] = useState(false);\n\n    const values = [true];\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n\n    function handleShow(breakpoint) {\n        setFullscreen(breakpoint);\n        setShow(true);\n        setScrollView(true);\n    }\n\n    useEffect(() => {\n        grabUserGarden();\n        props.setShowNav();\n    }, []);\n\n    async function grabUserGarden() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"GARDEN LIST FAIL\", response);\n        } else {\n            const data = await response.json();\n            setUserGarden(data);\n        }\n    }\n    console.log(userGarden);\n\n    function handleEditVegetablesClick() {\n        props.history.push(`/${props.match.params.garden}/vegetables/`);\n    }\n\n    function handleEditSoilClick() {\n        props.history.push(`/${props.match.params.garden}/soil/`);\n    }\n\n    function handleEditNameClick() {\n        setIsEditing(true);\n    }\n\n    function handleChange(e) {\n        setRename(e.target.value);\n        console.log(rename);\n    }\n\n    function print() {\n        window.print();\n    }\n\n    function handlePrintClick() {\n        setScrollView(false);\n        setTimeout(() => {\n            print();\n        });\n        setTimeout(() => {\n            setScrollView(true);\n        });\n    }\n\n    async function handleRenameClick() {\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: JSON.stringify({ name: rename }),\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"RENAME FAILED\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"RENAME SUCCESS\", data);\n            setIsEditing(false);\n            setUserGarden({ ...userGarden, [\"name\"]: rename });\n        }\n    }\n\n    function handleCloseRename() {\n        setIsEditing(false);\n    }\n\n    if (!userGarden) {\n        return (\n            <Spinner\n                animation=\"border\"\n                variant=\"success\"\n                className=\"garden-detail-spinner\"\n            />\n        );\n    }\n\n    return (\n        <div className=\"garden-detail-container\">\n            <div className=\"garden-detail-upper-container\">\n                <div className=\"garden-detail-upper-left\">\n                    {isEditing ? (\n                        <div>\n                            <h4>Update Garden Name:</h4>\n                            <div className=\"garden-detail-rename-container\">\n                                <input\n                                    type=\"text\"\n                                    value={rename}\n                                    onChange={handleChange}\n                                    className=\"form-control garden-detail-rename-input\"\n                                />\n                                <button\n                                    onClick={handleRenameClick}\n                                    className=\"btn btn-success garden-detail-rename-btn\"\n                                >\n                                    Rename\n                                </button>\n                                <button\n                                    className=\"btn btn-danger garden-detail-close-rename-btn\"\n                                    onClick={handleCloseRename}\n                                >\n                                    X\n                                </button>\n                            </div>\n                        </div>\n                    ) : (\n                        <h3>\n                            {userGarden.name}\n                            <FiEdit\n                                className=\"garden-detail-edit-btn\"\n                                onClick={handleEditNameClick}\n                            />\n                        </h3>\n                    )}\n                    <p>Created: {userGarden.created_at}</p>\n                    <h4>\n                        Soil{\" \"}\n                        <FiEdit\n                            className=\"garden-detail-edit-btn\"\n                            onClick={handleEditSoilClick}\n                        />\n                    </h4>\n                    <p>\n                        <strong>Characteristics:</strong>\n                        {userGarden.soil_details === null\n                            ? \"  Soil Type not selected\"\n                            : userGarden.soil_details.characteristics}\n                    </p>\n                    <p>\n                        <strong>Recommendations:</strong>\n                        {userGarden.soil_details === null\n                            ? \"  Soil Type not selected\"\n                            : userGarden.soil_details.recommendations}\n                    </p>\n\n\n                    <div className=\"summary-vegetable-container\">\n                        {values.map((v, idx) => (\n                            <Button\n                                key={idx}\n                                className=\"me-2 btn btn-success flagship-btn\"\n                                onClick={() => handleShow(v)}\n                            >\n                                Vegetables Table View\n                                {typeof v === \"string\" &&\n                                    `below ${v.split(\"-\")[0]}`}\n                            </Button>\n                        ))}\n                        <Modal\n                            show={show}\n                            fullscreen={fullscreen}\n                            onHide={() => setShow(false)}\n                            id={scrollView ? \"scroll\" : \"\"}\n                        >\n                            <Modal.Header closeButton>\n                                <Modal.Title>Your Vegetables</Modal.Title>\n                                <Button\n                                    className=\"btn btn-success summary-print-vegetables\"\n                                    onClick={handlePrintClick}\n                                >\n                                    Print Your Vegetables\n                                </Button>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <div className=\"summary-vegetable\">\n                                    <table className=\"summary-table\">\n                                        <thead>\n                                            <tr>\n                                                <th>Your Vegetable</th>\n                                                <th>Sun Exposure</th>\n                                                <th>Heat Tolerant</th>\n                                                <th>Drought Tolerant</th>\n                                                <th>Life Cycle</th>\n                                                <th>Seasonality</th>\n                                                <th>Varieties</th>\n                                                <th>Companions</th>\n                                                <th>Adversaries</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {userGarden.vegetables_details\n                                                .length === 0\n                                                ? \"\"\n                                                : userGarden.vegetables_details.map(\n                                                      (vegetable) => {\n                                                          return (\n                                                              <tr>\n                                                                  <td className=\"summary-td\">\n                                                                      <strong>\n                                                                          {\n                                                                              vegetable.name\n                                                                          }\n                                                                      </strong>\n                                                                  </td>\n                                                                  <td className=\"summary-td\">\n                                                                      {vegetable.exposure ===\n                                                                      \"BO\"\n                                                                          ? \"Full Sun And/Or Partial Sun\"\n                                                                          : vegetable.exposure ===\n                                                                            \"FS\"\n                                                                          ? \"Full Sun\"\n                                                                          : \"Partial Sun\"}\n                                                                  </td>\n                                                                  <td className=\"summary-td\">\n                                                                      {\" \"}\n                                                                      {vegetable.heat_tolerant\n                                                                          ? \"Yes\"\n                                                                          : \"No\"}\n                                                                  </td>\n                                                                  <td className=\"summary-td\">\n                                                                      {vegetable.drought_tolerant\n                                                                          ? \"Yes\"\n                                                                          : \"No\"}\n                                                                  </td>\n                                                                  <td className=\"summary-td\">\n                                                                      {vegetable.seasonality ===\n                                                                      \"CS\"\n                                                                          ? \"Cool-Season\"\n                                                                          : \"Warm-Season\"}\n                                                                  </td>\n                                                                  <td className=\"summary-td\">\n                                                                      {vegetable.life_cycle ===\n                                                                      \"AN\"\n                                                                          ? \"Annual\"\n                                                                          : vegetable.life_cycle ===\n                                                                            \"BI\"\n                                                                          ? \"Biennial\"\n                                                                          : \"Perennial\"}\n                                                                  </td>\n                                                                  <td className=\"summary-td\">\n                                                                      <span className=\"summary-category\"></span>{\" \"}\n                                                                      {userGarden.varieties ===\n                                                                      null\n                                                                          ? \"None\"\n                                                                          : userGarden\n                                                                                .varieties[\n                                                                                vegetable\n                                                                                    .name\n                                                                            ] ===\n                                                                            undefined\n                                                                          ? \"None\"\n                                                                          : userGarden.varieties[\n                                                                                vegetable\n                                                                                    .name\n                                                                            ].map(\n                                                                                (\n                                                                                    element\n                                                                                ) => {\n                                                                                    let varietiesPerVegetable =\n                                                                                        [];\n                                                                                    for (const prop in element) {\n                                                                                        varietiesPerVegetable.push(\n                                                                                            prop\n                                                                                        );\n                                                                                    }\n                                                                                    return varietiesPerVegetable.map(\n                                                                                        (\n                                                                                            variety\n                                                                                        ) => {\n                                                                                            return (\n                                                                                                <p>\n                                                                                                    {\n                                                                                                        variety\n                                                                                                    }\n                                                                                                </p>\n                                                                                            );\n                                                                                        }\n                                                                                    );\n                                                                                }\n                                                                            )}\n                                                                  </td>\n                                                                  {vegetable.companions ===\n                                                                  null ? (\n                                                                      <td className=\"summary-td summary-td summary-companions\">\n                                                                          None\n                                                                      </td>\n                                                                  ) : (\n                                                                      <td className=\"companion-list\">\n                                                                          {\n                                                                              vegetable.companions\n                                                                          }\n                                                                      </td>\n                                                                  )}\n                                                                  {vegetable.adversaries ===\n                                                                  null ? (\n                                                                      <td className=\"summary-td\">\n                                                                          None\n                                                                      </td>\n                                                                  ) : (\n                                                                      <td className=\"adversary-list summary-td\">\n                                                                          {\n                                                                              vegetable.adversaries\n                                                                          }\n                                                                      </td>\n                                                                  )}\n                                                              </tr>\n                                                          );\n                                                      }\n                                                  )}\n                                        </tbody>\n                                        <tfoot></tfoot>\n                                    </table>\n                                </div>\n                            </Modal.Body>\n                        </Modal>\n                    </div>\n\n                    <Button\n                        onClick={() => setOpen(!open)}\n                        aria-controls=\"example-collapse-text\"\n                        aria-expanded={open}\n                        className=\"btn btn-success flagship-btn\"\n                    >\n                        Vegetables Card View\n                    </Button>\n                </div>\n                <div className=\"garden-detail-upper-right\">\n                    <RichTextEditor userGardenID={userGarden.id} layout={userGarden.layout} />\n                </div>\n            </div>\n\n            <Collapse in={open}>\n                <div className=\"garden-detail-collapse-container\">\n                    <div className=\"garden-detail-vegetable-grid-container\">\n                        {userGarden.vegetables_details.map((vegetable) => {\n                            return (\n                                <div className=\"garden-detail-vegetable\">\n                                    <FiEdit\n                                        className=\"garden-detail-vegetable-edit\"\n                                        onClick={handleEditVegetablesClick}\n                                    />\n                                    <h5 className=\"garden-detail-vegetable-name\">\n                                        {vegetable.name}\n                                    </h5>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Plant with:\n                                        </span>{\" \"}\n                                        {vegetable.companions}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Do NOT plant with:\n                                        </span>{\" \"}\n                                        {vegetable.adversaries}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Sun Exposure:\n                                        </span>{\" \"}\n                                        {vegetable.exposure === \"BO\"\n                                            ? \"Full Sun And/Or Partial Sun\"\n                                            : vegetable.exposure === \"FS\"\n                                            ? \"Full Sun\"\n                                            : \"Partial Sun\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Heat Tolerant:\n                                        </span>{\" \"}\n                                        {vegetable.heat_tolerant ? \"Yes\" : \"No\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Drought Tolerant:\n                                        </span>{\" \"}\n                                        {vegetable.drought_tolerant\n                                            ? \"Yes\"\n                                            : \"No\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Life Cycle:\n                                        </span>{\" \"}\n                                        {vegetable.life_cycle === \"AN\"\n                                            ? \"Annual\"\n                                            : vegetable.life_cycle === \"BI\"\n                                            ? \"Biennial\"\n                                            : \"Perennial\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Seasonality:\n                                        </span>{\" \"}\n                                        {vegetable.seasonality === \"CS\"\n                                            ? \"Cool-Season\"\n                                            : \"Warm-Season\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Varieties:\n                                        </span>{\" \"}\n                                        {userGarden.varieties === null\n                                            ? \"\"\n                                            : userGarden.varieties[\n                                                  vegetable.name\n                                              ] === undefined\n                                            ? \" \"\n                                            : userGarden.varieties[\n                                                  vegetable.name\n                                              ].map((element) => {\n                                                  let varietiesPerVegetable =\n                                                      [];\n                                                  for (const prop in element) {\n                                                      varietiesPerVegetable.push(\n                                                          prop\n                                                      );\n                                                  }\n                                                  return varietiesPerVegetable.map(\n                                                      (variety) => {\n                                                          return (\n                                                              <div>\n                                                                  <p>\n                                                                      {variety}\n                                                                  </p>\n                                                              </div>\n                                                          );\n                                                      }\n                                                  );\n                                              })}\n                                    </p>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </Collapse>\n        </div>\n    );\n}\n\nexport default withRouter(GardenDetail);\n","import \"./Soil.css\";\nimport React from \"react\";\nimport EsriLoaderReact from \"esri-loader-react\";\nimport Cookie from \"js-cookie\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport { Button, Collapse } from \"react-bootstrap\";\n\nfunction Soil(props) {\n    const firstRender = useRef(true);\n    const [loaded, setLoaded] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [soil, setSoil] = useState({\n        id: null,\n        characteristics: \"\",\n        recommendations: \"\",\n        soil_order: \"\",\n    });\n    const [showMap, setShowMap] = useState(false);\n    const [maxWidth, setMaxWidth] = useState(true);\n    const [showDetails, setShowDetails] = useState(false);\n\n    const soilDiv = useRef()\n\n    useEffect(() => {\n        props.setShowNav(true);\n    }, []);\n\n    useEffect(() => {\n        if (firstRender.current === true) {\n            firstRender.current = false;\n        } else {\n            getSoilDetails();\n            setShowDetails(true);\n\n            setTimeout(() => {\n                scrollToSoil();\n            }, 300);\n\n        }\n    }, [soil.soil_order]);\n\n    const options = {\n        url: \"https://js.arcgis.com/4.21/\",\n    };\n\n    async function getSoilDetails() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/soils/?soil=${soil.soil_order}`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"failed\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"SUCCESS\", data);\n            if (data.length === 0) {\n                console.log(\"soil selection failed\");\n            } else {\n                console.log(\"soil details success\", data);\n                setSoil({\n                    ...soil,\n                    id: data[0].id,\n                    characteristics: data[0].characteristics,\n                    recommendations: data[0].recommendations,\n                });\n            }\n        }\n    }\n\n    async function handleSaveSoilClick() {\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: JSON.stringify({ soil: soil.id }),\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (!response.ok) {\n            console.log(\"SOIL PATCH FAILED\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"SOIL PATCH SUCCESS\", data);\n            props.history.push(`/${data.id}/vegetables/`);\n        }\n    }\n\n    function handleExpandMap() {\n        setOpen(!open);\n        setShowMap(!showMap);\n        setMaxWidth(!maxWidth);\n    }\n\n    function scrollToSoil() {\n        soilDiv.current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\",\n            inline: \"start\",\n        });\n    }\n\n    setTimeout(() => {\n        setLoaded(true);\n    });\n\n    return (\n        <div className=\"soil-container\">\n            <div className=\"soil-heading-map-flex-container\">\n                <div\n                    className=\"soil-heading-container\"\n                    id={maxWidth ? \"max-width\" : \"\"}\n                >\n                    <div className=\"soil-heading\">\n                        {/* <h2 className=\"soil-heading\">Find your Soil Type</h2> */}\n                        <p className=\"soil-description\">\n                            <strong>In this step</strong>, you will use the soil\n                            map below to find your soil type by clicking on your\n                            desired location. When you click on a location, the\n                            soil type at that precise location will be saved and\n                            the characateristics and recommendations for your\n                            soil will appear below the soil map.\n                        </p>\n                        <Button\n                            onClick={handleExpandMap}\n                            aria-controls=\"example-collapse-text\"\n                            aria-expanded={open}\n                            className=\"btn btn-success\"\n                        >\n                            {open ? \"Collapse Map\" : \"Find Your Soil Type!\"}\n                        </Button>\n                    </div>\n                </div>\n\n                <div className=\"soil-map-container\" id={showMap ? \"\" : \"hide\"}>\n                    <Collapse in={open}>\n                        <div className=\"map-view\">\n                            <EsriLoaderReact\n                                options={options}\n                                modulesToLoad={[\n                                    \"esri/config\",\n                                    \"esri/Map\",\n                                    \"esri/views/MapView\",\n                                    \"esri/layers/FeatureLayer\",\n                                    \"esri/widgets/Locate\",\n                                    \"esri/geometry/Point\",\n                                ]}\n                                onReady={({\n                                    loadedModules: [\n                                        esriConfig,\n                                        Map,\n                                        MapView,\n                                        FeatureLayer,\n                                        Locate,\n                                        Point,\n                                    ],\n                                    containerNode,\n                                }) => {\n                                    esriConfig.apiKey =\n                                        \"AAPK6b9ac47a7781479997be4a3c4f55379anHD405J2ju5NAgpM61QOKL_3OuxNpXIuC0e9p5uaVHSyQ7UQMwWHIuxYbSixZnev\";\n\n                                    const map = new Map({\n                                        basemap: \"arcgis-topographic\",\n                                    });\n\n                                    const view = new MapView({\n                                        container: containerNode,\n                                        map: map,\n                                        center: [-82.4, 34.8518],\n                                        zoom: 13,\n                                    });\n\n                                    const soilsLayer = new FeatureLayer({\n                                        url: \"https://landscape11.arcgis.com/arcgis/rest/services/USA_Soils_Map_Units/featureserver/0\",\n                                        outFields: [\"taxorder\"],\n                                        opacity: 0.5,\n                                    });\n                                    map.add(soilsLayer, 0);\n\n                                    const locate = new Locate({\n                                        view: view,\n                                        useHeadingEnabled: false,\n                                        goToOverride: function (view, options) {\n                                            options.target.scale = 1500;\n                                            return view.goTo(options.target);\n                                        },\n                                    });\n                                    let soilOrder1;\n                                    let soilOrder2;\n                                    view.on(\"immediate-click\", (event) => {\n                                        const latitude =\n                                            event.mapPoint.latitude;\n                                        const longitude =\n                                            event.mapPoint.longitude;\n                                        const screenPoint = view.toScreen(\n                                            new Point({ latitude, longitude })\n                                        );\n                                        view.hitTest(screenPoint).then(\n                                            (hitTestResult) => {\n                                                soilOrder1 =\n                                                    hitTestResult.results[0]\n                                                        .graphic.attributes\n                                                        .esrisymbology;\n                                                if (soilOrder1 !== soilOrder2) {\n                                                    setSoil({\n                                                        id: null,\n                                                        soil_order: soilOrder1,\n                                                        characteristics: \"\",\n                                                        recommendations: \"\",\n                                                    });\n                                                    soilOrder2 = soilOrder1;\n                                                } else {\n                                                    soilOrder2 = soilOrder1;\n                                                }\n                                            }\n                                        );\n                                    });\n\n                                    view.ui.add(locate, \"top-left\");\n                                }}\n                            />\n                        </div>\n                    </Collapse>\n                </div>\n            </div>\n            <div className=\"soil-lower-half-container\" id={showDetails ? \"\" : \"hide\"}>\n                <div\n                    className=\"display-results-container\"\n                    \n                >\n                    <div className=\"display-characteristics-container\" ref={soilDiv}>\n                        <h2 className=\"display-characteristics-heading\">\n                            Soil Characteristics:\n                        </h2>\n                        <p>{soil.characteristics}</p>\n                    </div>\n                    <div className=\"display-recommendations-container\">\n                        <h2 className=\"display-recommendations-heading\">\n                            Soil Recommendations:\n                        </h2>\n                        <p>{soil.recommendations}</p>\n                    </div>\n                </div>\n                <button\n                    id=\"soil-save-btn\"\n                    className=\"btn btn-success flagship-btn\"\n                    onClick={handleSaveSoilClick}\n                >\n                    Continue\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(Soil);\n","import React from \"react\";\nimport \"./FilteredVegetableList.css\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function FilteredVegetableList(props) {\n    return (\n        <div className=\"filtered-vegetables-container\">\n        {props.filteredVegetables.length === 0 ? \"\" : <h2 className=\"filtered-vegetables-heading\">Based on your Search:</h2>}\n            <div className=\"filtered-vegetables-grid-container\">\n                {props.filteredVegetables === undefined\n                    ? \"\"\n                    : props.filteredVegetables.map((vegetable) => {\n                        if (props.userVegetables.some((element) => element.name === vegetable.name)){\n                            console.log(\"true\")\n                            return (\n                              <div className=\"filtered-vegetable already-added\" key={uuidv4()}>\n                                  <p className=\"filtered-vegetable-name\">\n                                      {vegetable.name}\n                                  </p>\n\n                              </div>\n                          );\n                        } else {\n                            console.log(\"false\")\n                            return (\n                              <div className=\"filtered-vegetable\" key={uuidv4()}>\n                                  <p className=\"filtered-vegetable-name\">\n                                      {vegetable.name}\n                                  </p>\n                                  <button\n                                      className=\"btn btn-success filtered-add-btn\"\n                                      onClick={() =>\n                                          props.addToUserList(vegetable.id)\n                                      }\n                                  >\n                                      Add\n                                  </button>\n                              </div>\n                          );\n                        }\n\n                      })}\n            </div>\n        </div>\n    );\n}\n","import React from 'react'\nimport \"./UserVegetableList.css\"\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function UserVegetableList(props) {\n    return (\n        <div className=\"user-vegetable-list-container\">\n        {props.userVegetables.length === 0 ? \"\" : <h2 className=\"user-vegetable-heading\">Your Vegetables:</h2>}\n            <div className=\"user-vegetables-grid-container\">\n            {props.userVegetables === undefined\n                ? \"\"\n                : props.userVegetables.map((vegetable) => {\n                      return (<>\n                          {console.log(\"VEGGIE\",vegetable)}\n                          <div className=\"user-vegetable\" key={uuidv4()}>\n                              <p className=\"user-vegetable-name\">{vegetable.name}</p>\n                              <button className=\"btn btn-success user-add-vegetable-btn\" onClick={() => props.removeFromUserList(vegetable.id)}>Remove</button>\n                          </div></>\n                      );\n                  })}\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./Vegetables.css\";\nimport Cookie from \"js-cookie\";\nimport { useState, useEffect, useRef } from \"react\";\nimport FilteredVegetableList from \"./FilteredVegetableList\";\nimport UserVegetableList from \"./UserVegetableList\";\nimport { withRouter } from \"react-router\";\nimport { Button, Collapse, Fade } from \"react-bootstrap\";\nimport { ImArrowUp } from \"react-icons/im\";\n\nfunction Vegetables(props) {\n    let queryString = \"\";\n    let pkValues = [];\n\n    const [filterData, setFilterData] = useState({\n        name: \"\",\n        exposure: \"\",\n        heat_tolerant: \"\",\n        drought_tolerant: \"\",\n        life_cycle: \"\",\n        seasonality: \"\",\n    });\n\n    const [filteredVegetables, setFilteredVegetables] = useState([]);\n    const [userVegetables, setUserVegetables] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [showForm, setShowForm] = useState(false);\n    const [widthMax, setWidthMax] = useState(true);\n    const filteredVegScroll = useRef();\n    const filterFormScroll = useRef();\n\n    useEffect(() => {\n        getUsersVegetableList();\n    }, []);\n\n    useEffect(() => {\n        props.setShowNav(true);\n    }, []);\n\n    async function getUsersVegetableList() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"GETTING USER VEGETABLES FAILED\", response);\n        } else {\n            const data = await response.json();\n            setUserVegetables(data.vegetables_details);\n        }\n    }\n\n    async function getVegetableDetails() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(`/api/vegetables?${queryString}`, options);\n        if (response.ok === false) {\n            console.log(\"failed\", response);\n        } else {\n            const data = await response.json();\n            setFilteredVegetables(data);\n        }\n    }\n\n    function handleChange(e) {\n        if (e.target.type === \"checkbox\" && !e.target.checked) {\n            let updatedFilterData = { ...filterData, [e.target.name]: \"\" };\n            setFilterData(updatedFilterData);\n        } else if (e.target.type === \"checkbox\" && e.target.checked) {\n            let updatedFilterData = { ...filterData, [e.target.name]: \"True\" };\n            setFilterData(updatedFilterData);\n        } else {\n            let { name, value } = e.target;\n            let updatedFilterData = { ...filterData, [name]: value };\n            setFilterData(updatedFilterData);\n        }\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n\n        if (filterData.name.length > 0) {\n            if (queryString.length > 0) {\n                queryString += \"&\";\n            }\n            queryString = queryString + `name=${filterData.name}`;\n        }\n        if (filterData.exposure.length > 0) {\n            if (queryString.length > 0) {\n                queryString += \"&\";\n            }\n            queryString = queryString + `exposure=${filterData.exposure}`;\n        }\n        if (filterData.heat_tolerant.length > 0) {\n            if (queryString.length > 0) {\n                queryString += \"&\";\n            }\n            queryString =\n                queryString + `heat_tolerant=${filterData.heat_tolerant}`;\n        }\n        if (filterData.drought_tolerant.length > 0) {\n            if (queryString.length > 0) {\n                queryString += \"&\";\n            }\n            queryString =\n                queryString + `drought_tolerant=${filterData.drought_tolerant}`;\n        }\n        if (filterData.life_cycle.length > 0) {\n            if (queryString.length > 0) {\n                queryString += \"&\";\n            }\n            queryString = queryString + `life_cycle=${filterData.life_cycle}`;\n        }\n        if (filterData.seasonality.length > 0) {\n            if (queryString.length > 0) {\n                queryString += \"&\";\n            }\n            queryString = queryString + `seasonality=${filterData.seasonality}`;\n        }\n\n        getVegetableDetails();\n\n        queryString = \"\";\n        setTimeout(() => {\n            scrollToFiltered();\n        }, 300);\n    }\n\n    function addToUserList(id) {\n        let index = filteredVegetables.findIndex((element) => element.id == id);\n        console.log(\"INDEX\", index);\n        let updatedFilteredVegetables = [...filteredVegetables];\n        let userVeggieToAdd = updatedFilteredVegetables.splice(index, 1);\n        setUserVegetables([...userVegetables, userVeggieToAdd[0]]);\n    }\n\n    function removeFromUserList(id) {\n        let index = userVegetables.findIndex((element) => element.id === id);\n        let updatedUserVegetables = [...userVegetables];\n        updatedUserVegetables.splice(index, 1);\n        setUserVegetables(updatedUserVegetables);\n    }\n\n    function grabPKvalues(vegetables) {\n        for (let i = 0; i < vegetables.length; i++) {\n            pkValues.push(vegetables[i].id);\n        }\n    }\n\n    function scrollToFiltered() {\n        filteredVegScroll.current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\",\n            inline: \"start\",\n        });\n    }\n    function scrollToForm() {\n        filterFormScroll.current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\",\n            inline: \"start\",\n        });\n    }\n\n    async function handleSaveVegClick() {\n        grabPKvalues(userVegetables);\n\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: JSON.stringify({ vegetables: pkValues }),\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"VEG PATCH FAILED\", response);\n        } else {\n            const data = await response.json();\n            props.history.push(`/${data.id}/varieties/`);\n        }\n    }\n\n    function handleArrowClick() {\n        scrollToForm();\n    }\n\n    function handleOpenFormClick() {\n        setOpen(!open)\n        setShowForm(!showForm)\n        setWidthMax(!widthMax)\n    }\n\n    return (\n        <div className=\"vegetables-container\">\n            <div className=\"vegetables-heading-form-flex-container \">\n                <div className=\"vegetables-heading-container\" id={widthMax ? 'max-width' : ''}>\n                    {/* <h2 className=\"vegetables-heading\">\n                        Find the Most Suitable Vegetables\n                    </h2> */}\n                    <p className=\"vegetables-description\">\n                        <strong>In this step</strong>, you will pick out your\n                        potential vegetables by filtering out for the specifc\n                        needs of your garden. As you are using the filter, try\n                        to visualize the different parts of your garden. For\n                        example, one area might be shady, with poor\n                        accessibility to water, therefore, you would check the\n                        'Drought Tolerant' box and, then check the 'Partial Sun'\n                        from the dropdown. As you visualize the differing needs\n                        of your garden landscape, come back to the form and find\n                        the most suitable veggies!{\" \"}\n                    </p>\n\n                    <Button\n                        onClick={handleOpenFormClick}\n                        aria-controls=\"example-collapse-text\"\n                        aria-expanded={open}\n                        className=\"btn-success vegetables-expand-form-btn\"\n                    >\n                        Click to find Veggies!\n                    </Button>\n                </div>\n\n                <div className=\"vegetables-form-container\" id={showForm ? \"\" : \"hide\"}>\n                    <Fade in={open}>\n                        <form\n                            action=\"\"\n                            className=\"form-control vegetables-form\"\n                            onSubmit={handleSubmit}\n                            ref={filterFormScroll}\n                        >\n                            <div className=\"form-group\">\n                                <label htmlFor=\"name\">Name (Optional):</label>\n                                <input\n                                    type=\"text\"\n                                    id=\"name\"\n                                    name=\"name\"\n                                    onChange={handleChange}\n                                    className=\"form-control\"\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exposure\">Sun Exposure</label>\n                                <select\n                                    name=\"exposure\"\n                                    id=\"exposure\"\n                                    onChange={handleChange}\n                                    className=\"form-control\"\n                                >\n                                    <option value=\"\">ALL</option>\n                                    <option value=\"BO\">\n                                        Thrive in Both Full & Partial Sun\n                                    </option>\n                                    <option value=\"FS\">Full Sun</option>\n                                    <option value=\"PS\">Partial Sun</option>\n                                </select>\n                            </div>\n\n                            <div className=\"vegetables-checkboxes-container\">\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"checkbox\"\n                                        id=\"heat_tolerant\"\n                                        name=\"heat_tolerant\"\n                                        value=\"TRUE\"\n                                        onChange={handleChange}\n                                    />\n                                    <label htmlFor=\"heat_tolerant\">\n                                        Heat Tolerant\n                                    </label>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"checkbox\"\n                                        id=\"drought_tolerant\"\n                                        name=\"drought_tolerant\"\n                                        value=\"TRUE\"\n                                        onChange={handleChange}\n                                    />\n                                    <label htmlFor=\"drought_tolerant\">\n                                        Drought Tolerant\n                                    </label>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"life_cycle\">Life Cycle</label>\n                                <select\n                                    name=\"life_cycle\"\n                                    id=\"life_cycle\"\n                                    onChange={handleChange}\n                                    className=\"form-control\"\n                                >\n                                    <option value=\"\">All</option>\n                                    <option value=\"AN\">Annual</option>\n                                    <option value=\"BI\">Biennial</option>\n                                    <option value=\"PE\">Perennial</option>\n                                </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"seasonality\">Seasonality</label>\n                                <select\n                                    name=\"seasonality\"\n                                    id=\"seasonality\"\n                                    onChange={handleChange}\n                                    className=\"form-control\"\n                                >\n                                    <option value=\"\">All</option>\n                                    <option value=\"CS\">Cool Season</option>\n                                    <option value=\"WS\">Warm Season</option>\n                                </select>\n                            </div>\n\n                            <button className=\"btn btn-success vegetable-form-btn\">\n                                Search\n                            </button>\n                        </form>\n                    </Fade>{\" \"}\n                </div>\n            </div>\n            <div ref={filteredVegScroll}>\n                <FilteredVegetableList\n                    filteredVegetables={filteredVegetables}\n                    userVegetables={userVegetables}\n                    addToUserList={addToUserList}\n                />\n            </div>\n            <div className=\"vegetables-user-list-container\">\n                <UserVegetableList\n                    userVegetables={userVegetables}\n                    removeFromUserList={removeFromUserList}\n                />\n                <ImArrowUp\n                    className=\"vegetables-arrow-scroll\"\n                    onClick={handleArrowClick}\n                />\n            </div>\n\n            {userVegetables.length === 0 ? (\n                \"\"\n            ) : (\n                <button\n                    className=\"btn flagship-btn vegetables-btn\"\n                    onClick={handleSaveVegClick}\n                >\n                    Continue\n                </button>\n            )}\n        </div>\n    );\n}\n\nexport default withRouter(Vegetables);\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport Cookie from \"js-cookie\";\nimport { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router\";\nimport \"./Companions.css\";\n\nfunction Companions(props) {\n    const [userGarden, setUserGarden] = useState();\n\n    useEffect(() => {\n        getGardenDetails();\n    }, []);\n\n    async function getGardenDetails() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"GET DETAILS FAILED\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"GET DETAILS SUCCESS\", data);\n            setUserGarden(data);\n        }\n    }\n\n    if (!userGarden) {\n        return (\n            <Spinner\n                animation=\"border\"\n                variant=\"success\"\n                className=\"garden-detail-spinner\"\n            />\n        );\n    }\n\n    return (\n        <div className=\"companions-container\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Your Vegetable</th>\n                        <th>Companions</th>\n                        <th>Adversaries</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {userGarden.vegetables_details.length === 0\n                        ? \"\"\n                        : userGarden.vegetables_details.map((vegetable) => {\n                              return (\n                                  <tr>\n                                      <td>\n                                          <strong>{vegetable.name}</strong>\n                                      </td>\n                                      {vegetable.companions === null ? <td>\n                                          None\n                                      </td> : <td className=\"companion-list\">\n                                          {vegetable.companions}\n                                      </td>}\n                                      {vegetable.adversaries === null ? <td>\n                                          None\n                                      </td> : <td className=\"adversary-list\">\n                                          {vegetable.adversaries}\n                                      </td>}\n                                  </tr>\n                              );\n                          })}\n                </tbody>\n                <tfoot>\n\n                </tfoot>\n            </table>\n        </div>\n    );\n}\n\nexport default withRouter(Companions);\n","import React from \"react\";\nimport Companions from \"./Companions\";\nimport { useRef, useEffect, useState } from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport \"./Layout.css\";\nimport Cookie from \"js-cookie\";\n\nfunction Layout(props) {\n\n    useEffect(() => {\n        props.setShowNav(true);\n    }, []);\n\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n    const [isDrawing, setIsDrawing] = useState(false);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        canvas.width = 450 * 2;\n        canvas.height = 450 * 2;\n        canvas.style.width = `${450}px`;\n        canvas.style.height = `${450}px`;\n\n        const context = canvas.getContext(\"2d\");\n        context.scale(2, 2);\n        context.lineCap = \"round\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 5;\n        contextRef.current = context;\n    }, []);\n\n    function startDrawing({ nativeEvent }) {\n        const { offsetX, offsetY } = nativeEvent;\n        contextRef.current.beginPath();\n        contextRef.current.moveTo(offsetX, offsetY);\n        setIsDrawing(true);\n    }\n    function finishDrawing() {\n        contextRef.current.closePath();\n        setIsDrawing(false);\n    }\n\n    function draw({ nativeEvent }) {\n        if (!isDrawing) {\n            return;\n        }\n        const { offsetX, offsetY } = nativeEvent;\n        contextRef.current.lineTo(offsetX, offsetY);\n        contextRef.current.stroke();\n    }\n\n    async function postCanvasLayout(formData) {\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: formData,\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"LAYOUT UPLOAD FAILED\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"LAYOUT UPLOAD SUCCESS\", data);\n        }\n    }\n\n    async function handleSaveCanvas() {\n        let imageBlob = await new Promise((resolve) =>\n            canvasRef.current.toBlob(resolve, \"image/png\")\n        );\n        const formData = new FormData();\n        formData.append(\"layout\", imageBlob, \"image.png\");\n        postCanvasLayout(formData);\n    }\n\n    function handleContinueClick() {\n        props.history.push(\"/summary\");\n    }\n\n    return (\n        <div className=\"layout-container\">\n            <div className=\"layout-heading-container\">\n            <h2 className=\"layout-heading\">\n                Time to Figure out your Layout!\n            </h2>\n            <p className=\"layout-description\">\n                <strong>In this step</strong>, you will find the vegetables you have chosen in the table below along with the vegetables best pairings (companions) and worse pairings (adversaries). Use the companion chart to think about how you want to lay out your garden. Then, use the canvas to the right to sketch out the placement of your beds and vegetables.\n            </p>\n             </div>\n\n            <div className=\"layout-flex-container\">\n                <Companions />\n                <div className=\"canvas-container\">\n                    <canvas\n                        onMouseDown={startDrawing}\n                        onMouseUp={finishDrawing}\n                        onMouseMove={draw}\n                        ref={canvasRef}\n                        className=\"layout-canvas\"\n                    />\n                    <div className=\"layout-btn-container\">\n                        <button\n                            className=\"btn btn-success flagship-btn\"\n                            onClick={handleSaveCanvas}\n                        >\n                            Save Sketch to Profile\n                        </button>\n                        <NavLink to={`/${props.match.params.garden}/summary`}>\n                            <button className=\"btn btn-success flagship-btn\" onClick={handleContinueClick}>\n                                Summary\n                            </button>\n                        </NavLink>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(Layout);\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./Summary.css\";\nimport Cookie from \"js-cookie\";\nimport { withRouter } from \"react-router\";\nimport { Spinner, Modal, Button,Collapse } from \"react-bootstrap\";\nimport { FiEdit } from \"react-icons/fi\";\n\n\nfunction Summary(props) {\n    const [userGarden, setUserGarden] = useState();\n    const [scrollView, setScrollView] = useState(false);\n    const [open, setOpen] = useState(false);\n    const values = [true];\n    const [fullscreen, setFullscreen] = useState(true);\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        grabUserGarden();\n        props.setShowNav(true);\n    }, []);\n\n    function handleShow(breakpoint) {\n        setFullscreen(breakpoint);\n        setShow(true);\n        setScrollView(true);\n    }\n\n\n\n    async function grabUserGarden() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"GARDEN LIST FAIL\", response);\n        } else {\n            const data = await response.json();\n            setUserGarden(data);\n        }\n    }\n\n    if (!userGarden) {\n        return (\n            <Spinner\n                animation=\"border\"\n                variant=\"success\"\n                className=\"garden-detail-spinner\"\n            />\n        );\n    }\n\n    console.log(\"SUMMARY PAGE GARDEN\", userGarden);\n\n    function print() {\n        window.print();\n    }\n\n    function handlePrintClick() {\n        setScrollView(false);\n        setTimeout( () => {\n            print();\n        })\n        setTimeout( () => {\n            setScrollView(true);\n        })\n    }\n\n        function handleEditVegetablesClick() {\n        props.history.push(`/${props.match.params.garden}/vegetables/`);\n    }\n\n    return (\n        <div className=\"summary-container\">\n            <div className=\"summary-report-container\">\n                <h2 className=\"summary-report-main-heading\">\n                    Garden Preparation Report\n                </h2>\n                <p className=\"summary-report-date\">{userGarden.created_at}</p>\n                <div className=\"summary-soil-container\">\n                    <h3>Soil</h3>\n                    <p>\n                        <strong>Characteristics:</strong>{\" \"}\n                        {userGarden.soil_details.characteristics}\n                    </p>\n                    <p>\n                        <strong>Recommendations:</strong>{\" \"}\n                        {userGarden.soil_details.recommendations}\n                    </p>\n                </div>{\" \"}\n                <div className=\"summary-layout-container\">\n                    <h3>Layout</h3>\n                    <img src={userGarden.layout}/>\n                </div>\n                <div className=\"summary-vegetable-container\">\n                    {values.map((v, idx) => (\n                        <Button\n                            key={idx}\n                            className=\"me-2 btn btn-success\"\n                            onClick={() => handleShow(v)}\n                        >\n                            Vegetables Table\n                            {typeof v === \"string\" &&\n                                `below ${v.split(\"-\")[0]}`}\n                        </Button>\n                    ))}\n                    <Modal\n                        show={show}\n                        fullscreen={fullscreen}\n                        onHide={() => setShow(false)}\n                        id = {scrollView ? \"scroll\" : \"\"}\n                    >\n                        <Modal.Header closeButton>\n                            <Modal.Title>Your Vegetables</Modal.Title>\n                            <Button\n                                className=\"btn btn-success summary-print-vegetables\"\n                                onClick={handlePrintClick}\n                            >\n                                Print Your Vegetables\n                            </Button>\n                        </Modal.Header>\n                        <Modal.Body >\n                            <div className=\"summary-vegetable\">\n                                <table className=\"summary-table\">\n                                    <thead>\n                                        <tr>\n                                            <th>Your Vegetable</th>\n                                            <th>Sun Exposure</th>\n                                            <th>Heat Tolerant</th>\n                                            <th>Drought Tolerant</th>\n                                            <th>Life Cycle</th>\n                                            <th>Seasonality</th>\n                                            <th>Varieties</th>\n                                            <th>Companions</th>\n                                            <th>Adversaries</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {userGarden.vegetables_details\n                                            .length === 0\n                                            ? \"\"\n                                            : userGarden.vegetables_details.map(\n                                                  (vegetable) => {\n                                                      return (\n                                                          <tr>\n                                                              <td className=\"summary-td\">\n                                                                  <strong>\n                                                                      {\n                                                                          vegetable.name\n                                                                      }\n                                                                  </strong>\n                                                              </td>\n                                                              <td className=\"summary-td\">\n                                                                  {vegetable.exposure ===\n                                                                  \"BO\"\n                                                                      ? \"Full Sun And/Or Partial Sun\"\n                                                                      : vegetable.exposure ===\n                                                                        \"FS\"\n                                                                      ? \"Full Sun\"\n                                                                      : \"Partial Sun\"}\n                                                              </td>\n                                                              <td className=\"summary-td\">\n                                                                  {\" \"}\n                                                                  {vegetable.heat_tolerant\n                                                                      ? \"Yes\"\n                                                                      : \"No\"}\n                                                              </td>\n                                                              <td className=\"summary-td\">\n                                                                  {vegetable.drought_tolerant\n                                                                      ? \"Yes\"\n                                                                      : \"No\"}\n                                                              </td>\n                                                              <td className=\"summary-td\">\n                                                                  {vegetable.seasonality ===\n                                                                  \"CS\"\n                                                                      ? \"Cool-Season\"\n                                                                      : \"Warm-Season\"}\n                                                              </td>\n                                                              <td className=\"summary-td\">\n                                                                  {vegetable.life_cycle ===\n                                                                  \"AN\"\n                                                                      ? \"Annual\"\n                                                                      : vegetable.life_cycle ===\n                                                                        \"BI\"\n                                                                      ? \"Biennial\"\n                                                                      : \"Perennial\"}\n                                                              </td>\n                                                              <td className=\"summary-td\">\n                                                                  <span className=\"summary-category\"></span>{\" \"}\n                                                                  {userGarden.varieties ===\n                                                                  null\n                                                                      ? \"None\"\n                                                                      : userGarden\n                                                                            .varieties[\n                                                                            vegetable\n                                                                                .name\n                                                                        ] ===\n                                                                        undefined\n                                                                      ? \"None\"\n                                                                      : userGarden.varieties[\n                                                                            vegetable\n                                                                                .name\n                                                                        ].map(\n                                                                            (\n                                                                                element\n                                                                            ) => {\n                                                                                let varietiesPerVegetable =\n                                                                                    [];\n                                                                                for (const prop in element) {\n                                                                                    varietiesPerVegetable.push(\n                                                                                        prop\n                                                                                    );\n                                                                                }\n                                                                                return varietiesPerVegetable.map(\n                                                                                    (\n                                                                                        variety\n                                                                                    ) => {\n                                                                                        return (\n                                                                                            <p>\n                                                                                                {\n                                                                                                    variety\n                                                                                                }\n                                                                                            </p>\n                                                                                        );\n                                                                                    }\n                                                                                );\n                                                                            }\n                                                                        )}\n                                                              </td>\n                                                              {vegetable.companions ===\n                                                              null ? (\n                                                                  <td className=\"summary-td summary-td summary-companions\">\n                                                                      None\n                                                                  </td>\n                                                              ) : (\n                                                                  <td className=\"companion-list\">\n                                                                      {\n                                                                          vegetable.companions\n                                                                      }\n                                                                  </td>\n                                                              )}\n                                                              {vegetable.adversaries ===\n                                                              null ? (\n                                                                  <td className=\"summary-td\">\n                                                                      None\n                                                                  </td>\n                                                              ) : (\n                                                                  <td className=\"adversary-list summary-td\">\n                                                                      {\n                                                                          vegetable.adversaries\n                                                                      }\n                                                                  </td>\n                                                              )}\n                                                          </tr>\n                                                      );\n                                                  }\n                                              )}\n                                    </tbody>\n                                    <tfoot></tfoot>\n                                </table>\n                            </div>\n                        </Modal.Body>\n                    </Modal>\n                </div>\n\n                <Button\n                        onClick={() => setOpen(!open)}\n                        aria-controls=\"example-collapse-text\"\n                        aria-expanded={open}\n                        className=\"btn btn-success flagship-btn\"\n                    >\n                        Vegetables Card View\n                    </Button>\n\n\n                <Collapse in={open}>\n                <div className=\"garden-detail-collapse-container\">\n                    <div className=\"garden-detail-vegetable-grid-container\">\n                        {userGarden.vegetables_details.map((vegetable) => {\n                            return (\n                                <div className=\"garden-detail-vegetable\">\n                                    <FiEdit\n                                        className=\"garden-detail-vegetable-edit\"\n                                        onClick={handleEditVegetablesClick}\n                                    />\n                                    <h5 className=\"garden-detail-vegetable-name\">\n                                        {vegetable.name}\n                                    </h5>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Plant with:\n                                        </span>{\" \"}\n                                        {vegetable.companions}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Do NOT plant with:\n                                        </span>{\" \"}\n                                        {vegetable.adversaries}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Sun Exposure:\n                                        </span>{\" \"}\n                                        {vegetable.exposure === \"BO\"\n                                            ? \"Full Sun And/Or Partial Sun\"\n                                            : vegetable.exposure === \"FS\"\n                                            ? \"Full Sun\"\n                                            : \"Partial Sun\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Heat Tolerant:\n                                        </span>{\" \"}\n                                        {vegetable.heat_tolerant ? \"Yes\" : \"No\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Drought Tolerant:\n                                        </span>{\" \"}\n                                        {vegetable.drought_tolerant\n                                            ? \"Yes\"\n                                            : \"No\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Life Cycle:\n                                        </span>{\" \"}\n                                        {vegetable.life_cycle === \"AN\"\n                                            ? \"Annual\"\n                                            : vegetable.life_cycle === \"BI\"\n                                            ? \"Biennial\"\n                                            : \"Perennial\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Seasonality:\n                                        </span>{\" \"}\n                                        {vegetable.seasonality === \"CS\"\n                                            ? \"Cool-Season\"\n                                            : \"Warm-Season\"}\n                                    </p>\n                                    <p>\n                                        <span className=\"garden-detail-category\">\n                                            Varieties:\n                                        </span>{\" \"}\n                                        {userGarden.varieties === null\n                                            ? \"\"\n                                            : userGarden.varieties[\n                                                  vegetable.name\n                                              ] === undefined\n                                            ? \" \"\n                                            : userGarden.varieties[\n                                                  vegetable.name\n                                              ].map((element) => {\n                                                  let varietiesPerVegetable =\n                                                      [];\n                                                  for (const prop in element) {\n                                                      varietiesPerVegetable.push(\n                                                          prop\n                                                      );\n                                                  }\n                                                  return varietiesPerVegetable.map(\n                                                      (variety) => {\n                                                          return (\n                                                              <div>\n                                                                  <p>\n                                                                      {variety}\n                                                                  </p>\n                                                              </div>\n                                                          );\n                                                      }\n                                                  );\n                                              })}\n                                    </p>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </Collapse>\n            </div>\n\n            \n        </div>\n    );\n}\n\nexport default withRouter(Summary);\n","import \"./NavBar.css\";\nimport React from \"react\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useState } from \"react\";\nimport { NavLink, withRouter } from \"react-router-dom\";\n\nfunction NavBar(props) {\n    const [radioValue, setRadioValue] = useState(\"\");\n\n    const radios = [\n        { name: \"Soil\", value: \"soil\" },\n        { name: \"Vegetables\", value: \"vegetables\" },\n        { name: \"Seed Varieties\", value: \"varieties\" },\n        { name: \"Physical Layout\", value: \"layout\" },\n    ];\n\n    let paramValue;\n    paramValue = props.location.pathname.split(\"/\")[1]\n\n    function handleChange(e) {\n        setRadioValue(e.currentTarget.value);\n    }\n\n\n    return (\n        <div className=\"navbar-container\">\n            <div className=\"nav-btn-group\">\n                <ButtonGroup>\n                    {radios.map((radio, index) => (\n                        <NavLink to={`/${paramValue}/${radio.value}/`} className=\"navbar-navlink\">\n                            <ToggleButton\n                                className=\"nav-btn navbar-radio-btn\"\n                                key={uuidv4()}\n                                id={`radio-${index}`}\n                                type=\"radio\"\n                                variant=\"outline-success\"\n                                name=\"radio\"\n                                value={radio.value}\n                                checked={radio.value === radioValue}\n                                onChange={(e) => handleChange(e)}\n                            >\n                                {radio.name}\n                            </ToggleButton>\n                        </NavLink>\n                    ))}\n                </ButtonGroup>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(NavBar);","import React from 'react'\n// import { AiOutlineCopyrightCircle } from 'react-icons/ai'\nimport './Footer.css'\n\nexport default function Footer() {\n    return (\n        <div className=\"footer-container\">\n            {/* <p className=\"footer-copyright\"> Copyright <AiOutlineCopyrightCircle /> 2021 <a href=\"https://github.com/ggroshansii\" className=\"footer-logo-link\">Flourish</a>. All Rights Reserved</p> */}\n        </div>\n    )\n}\n","import Cookie from \"js-cookie\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { MdAddCircleOutline } from \"react-icons/md\";\nimport { Spinner } from \"react-bootstrap\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport { IoIosAddCircle } from \"react-icons/io\";\nimport './VarietiesDetail.css'\n\nfunction VarietiesDetail(props) {\n    const [variety, setVariety] = useState(\"\");\n    const [previousVarietyList, setPreviousVarietyList] = useState([]);\n    const [showInput, setShowInput] = useState(false);\n\n    useEffect(() => {\n        findPreviousSavedVarieties();\n    }, []);\n\n\n    useEffect( ()=> {\n        console.log('wassup')\n        console.log(previousVarietyList)\n    }, [previousVarietyList])\n\n\n    async function handleBlur(e) {\n        e.preventDefault();\n        if (variety.length > 0) {\n            const updatedVariety = {\n                [props.name]: variety,\n            };\n            props.updateVarieties(updatedVariety);\n            setVariety(\"\");\n            setPreviousVarietyList((prevState) => [...prevState, variety]);\n            props.setShowSuccessAlert(true)\n            setTimeout(() =>\n            props.setShowSuccessAlert(false), 1500)\n        }\n\n\n    }\n\n    async function findPreviousSavedVarieties() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"FAILED\", response);\n        } else {\n            const data = await response.json();\n            console.log(\"SUCCESS FETCH ON VAR DETAIL\", data);\n\n            for (const property in data.varieties) {\n                if (property === props.name) {\n                    for (let i = 0; i < data.varieties[property].length; i++) {\n                        for (let key in data.varieties[property][i]) {\n                            setPreviousVarietyList((prevValue) => [\n                                ...prevValue,\n                                key,\n                            ]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function handleDelete(idx) {\n        props.deleteVariety(props.name, idx)\n        let updatedState = [...previousVarietyList]\n        updatedState.splice(idx, 1)\n        console.log(\"UP\", updatedState)\n        setPreviousVarietyList(prevState => updatedState)\n\n        props.setShowDeleteAlert(true)\n            setTimeout(() =>\n            props.setShowDeleteAlert(false), 1500)\n    }\n\n    function handleKeyPress(e) {\n        console.log('fired')\n        console.log(e.key)\n        if (e.key=== 'Enter') {\n            console.log(\"blur fired\")\n            handleBlur(e)\n        }\n    }\n\n    function handleShowVarietyClick() {\n        setShowInput(true)\n    }\n\n\n    if (!props.userGarden) {\n        return (\n            <Spinner\n                animation=\"border\"\n                variant=\"success\"\n                className=\"garden-detail-spinner\"\n            />\n        );\n    }\n\n    return (\n        <div className=\"varieties-detail-container\">\n            <div className=\"form-group varieties-form-group\">\n                <p className=\"varieties-detail-name\">{props.name} {showInput ? \"\" : <IoIosAddCircle\n                    className=\"varieties-detail-show-input-btn\"\n                    onClick={handleShowVarietyClick}\n                />}</p>\n                <label\n                    className=\"varieties-detail-label label-form\"\n                    htmlFor=\"variety\"\n                ></label>\n                <ol>\n                    {previousVarietyList.map((prevVariety, idx) => (\n                        <li>{prevVariety} <AiOutlineClose onClick={() => handleDelete(idx)} value={idx}/></li>\n                    ))}\n                </ol>\n                {showInput ? <input\n                    id=\"variety\"\n                    value={variety}\n                    name={props.name}\n                    className=\"form-control varieties-detail-input\"\n                    type=\"text\"\n                    placeholder=\"Seed Variety\"\n                    onBlur={handleBlur}\n                    onChange={(e) => setVariety(e.target.value)}\n                    onKeyPress={(e) => handleKeyPress(e)}\n                /> : \"\"}\n            </div>\n        </div>\n    );\n}\n\nexport default withRouter(VarietiesDetail);\n","import React from \"react\";\nimport Cookie from \"js-cookie\";\nimport { useState, useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { withRouter } from \"react-router\";\nimport VarietiesDetail from \"./VarietiesDetail\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Varieties.css\";\n\nfunction Varieties(props) {\n    const [userGarden, setUserGarden] = useState();\n    const [showSuccessAlert, setShowSuccessAlert] = useState(false);\n    const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n\n    useEffect(() => {\n        grabUserGarden();\n        props.setShowNav(true);\n    }, []);\n\n    async function grabUserGarden() {\n        const options = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"GARDEN LIST FAIL\", response);\n        } else {\n            const data = await response.json();\n            setUserGarden(data);\n        }\n    }\n\n    async function updateVarieties(variety) {\n        console.log(\"variety\", variety);\n\n        const varieties = { ...userGarden.varieties };\n        const key = Object.keys(variety)[0];\n\n        if (varieties[key] === null || varieties[key] === undefined) {\n            varieties[key] = [];\n        }\n        varieties[key].push({ [variety[key]]: \"\" });\n\n        if (variety[key] !== \"\") {\n            const options = {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n                },\n                body: JSON.stringify({ varieties }),\n            };\n            const response = await fetch(\n                `/api/gardens/${props.match.params.garden}/`,\n                options\n            );\n            if (response.ok === false) {\n                console.log(\"VARIETY PATCH FAILED\", response);\n            } else {\n                const data = await response.json();\n                setUserGarden((prevState) => ({\n                    ...prevState,\n                    varieties: varieties,\n                }));\n                console.log(\"VARIETY PATCH SUCCESS\", data);\n            }\n        }\n    }\n\n    async function deleteVariety(name, idx) {\n        let varieties = { ...userGarden.varieties };\n        console.log(\"VARIETIES\", varieties);\n\n        for (const property in varieties) {\n            if (property === name) {\n                varieties[property].splice(idx, 1);\n            }\n        }\n\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-CSRFToken\": Cookie.get(\"csrftoken\"),\n            },\n            body: JSON.stringify({ varieties }),\n        };\n        const response = await fetch(\n            `/api/gardens/${props.match.params.garden}/`,\n            options\n        );\n        if (response.ok === false) {\n            console.log(\"VARIETY PATCH FAILED\", response);\n        } else {\n            const data = await response.json();\n            setUserGarden((prevState) => ({\n                ...prevState,\n                varieties: varieties,\n            }));\n            console.log(\"VARIETY PATCH SUCCESS\", data);\n        }\n    }\n\n    if (!userGarden) {\n        return (\n            <Spinner\n                animation=\"border\"\n                variant=\"success\"\n                className=\"garden-detail-spinner\"\n            />\n        );\n    }\n\n    console.log(\"USERGARDEN\", userGarden);\n\n    return (\n        <div className=\"varieties-container\">\n            {showSuccessAlert ? (\n                <div\n                    class=\"alert alert-success varieties-save-alert\"\n                    role=\"alert\"\n                >\n                    Variety Saved!\n                </div>\n            ) : (\n                <div></div>\n            )}\n            {showDeleteAlert ? (\n                <div\n                    class=\"alert alert-danger varieties-delete-alert\"\n                    role=\"alert\"\n                >\n                    Variety Deleted!\n                </div>\n            ) : (\n                <div></div>\n            )}\n            <div >\n                <form action=\"\" className=\"form-control varieties-form varieties-grid-container\">\n                    {userGarden.vegetables_details.map((vegetable) => {\n                        return (\n                            <VarietiesDetail\n                                {...vegetable}\n                                updateVarieties={updateVarieties}\n                                userGarden={userGarden}\n                                setShowSuccessAlert={setShowSuccessAlert}\n                                setShowDeleteAlert={setShowDeleteAlert}\n                                deleteVariety={deleteVariety}\n                            />\n                        );\n                    })}\n                </form>\n            </div>\n\n            <NavLink to={`/${props.match.params.garden}/layout`}>\n                <button className=\"btn btn-success flagship-btn varieties-continue-btn\">\n                    Continue\n                </button>\n            </NavLink>\n        </div>\n    );\n}\n\nexport default withRouter(Varieties);\n","import \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Registration from \"./components/Auth/Registration\";\nimport Login from \"./components/Auth/Login\";\nimport Splash from \"./components/Auth/Splash\";\nimport GardenList from \"./components/Main/Profile/GardenList\";\nimport GardenDetail from \"./components/Main/Profile/GardenDetail\";\nimport CreateAGarden from \"./components/Main/Profile/CreateAGarden\";\nimport Soil from './components/Main/Soil/Soil'\nimport Vegetables from './components/Main/Vegetables/Vegetables'\nimport Layout from \"./components/Main/Layout/Layout\";\nimport Summary from \"./components/Main/Summary/Summary\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Footer from \"./components/Footer/Footer\";\nimport Cookie from 'js-cookie';\nimport { useState, useEffect } from \"react\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport Varieties from \"./components/Main/Varieties/Varieties\";\n\n\nfunction App() {\n    const [isAuth, setIsAuth] = useState(false);\n    const [currentGarden, setCurrentGarden] = useState();\n    const [showNav, setShowNav] = useState(false);\n    const [showHeader, setShowHeader] = useState(true);\n\n    useEffect( () => {\n        const checkAuth  = () => {\n            let cookie = Cookie.get('Authorization');\n            if (cookie) {\n                setIsAuth(true);\n            } else {\n                setIsAuth(false);\n            }\n        }\n        checkAuth()\n    }, []);\n\n    let navBar;\n    if (isAuth && showNav) {\n        navBar = <NavBar />;\n    } else {\n        navBar = \"\"\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Header isAuth={isAuth} setIsAuth={setIsAuth} showHeader={showHeader}/>\n            <Switch>\n                <Route path=\"/login\">\n                    <Login setIsAuth={setIsAuth} isAuth={isAuth} setShowHeader={setShowHeader}/>\n                </Route>\n                <Route path=\"/registration\">\n                    <Registration setIsAuth={setIsAuth} isAuth={isAuth} setShowHeader={setShowHeader}/>\n                </Route>\n                <Route path=\"/gardenlist/:garden\">\n                    <GardenDetail setShowNav={setShowNav}/>\n                </Route>\n                <Route path=\"/gardenlist\">\n                    <GardenList isAuth={isAuth} setShowNav={setShowNav} setShowHeader={setShowHeader}/>\n                </Route>\n                <Route path=\"/creategarden\">\n                    <CreateAGarden/>\n                </Route>\n                <Route path=\"/:garden/soil\">\n                    <Soil setShowNav={setShowNav}/>\n                </Route>\n                <Route path=\"/:garden/vegetables\">\n                    <Vegetables setShowNav={setShowNav}/>\n                </Route>\n                <Route path=\"/:garden/varieties\">\n                    <Varieties setShowNav={setShowNav}/>\n                </Route>\n                <Route path=\"/:garden/layout\">\n                    <Layout setShowNav={setShowNav}/>\n                </Route>\n                <Route path=\"/:garden/summary\">\n                    <Summary setShowNav={setShowNav}/>\n                </Route>\n\n                <Route path=\"/\">\n                    <Splash isAuth={isAuth} setShowHeader={setShowHeader}/>\n                </Route>\n                <Route></Route>\n                <Route></Route>\n                <Route></Route>\n            </Switch>\n            {navBar}\n            <Footer />\n        </div>\n    );\n}\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </BrowserRouter>,\n\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}